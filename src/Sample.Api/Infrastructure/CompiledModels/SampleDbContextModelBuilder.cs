// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Sample.Api.Infrastructure.EntityFramework
{
    public partial class SampleDbContextModel
    {
        partial void Initialize()
        {
            var person = PersonEntityType.Create(this);

            PersonEntityType.CreateAnnotations(person);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var person = FindEntityType("Sample.Api.Core.Types.Person")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            person.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var sampleApiCoreTypesPersonTableBase = new TableBase("Sample.Api.Core.Types.Person", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", sampleApiCoreTypesPersonTableBase);
            sampleApiCoreTypesPersonTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", sampleApiCoreTypesPersonTableBase);
            sampleApiCoreTypesPersonTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("Sample.Api.Core.Types.Person", sampleApiCoreTypesPersonTableBase);
            var sampleApiCoreTypesPersonMappingBase = new TableMappingBase<ColumnMappingBase>(person, sampleApiCoreTypesPersonTableBase, true);
            sampleApiCoreTypesPersonTableBase.AddTypeMapping(sampleApiCoreTypesPersonMappingBase, false);
            defaultTableMappings.Add(sampleApiCoreTypesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, person.FindProperty("Id")!, sampleApiCoreTypesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, person.FindProperty("Name")!, sampleApiCoreTypesPersonMappingBase);

            var tableMappings = new List<TableMapping>();
            person.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var personsTable = new Table("Persons", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", personsTable);
            personsTable.Columns.Add("Id", idColumn);
            var nameColumn = new Column("Name", "TEXT", personsTable);
            personsTable.Columns.Add("Name", nameColumn);
            var pK_Persons = new UniqueConstraint("PK_Persons", personsTable, new[] { idColumn });
            personsTable.PrimaryKey = pK_Persons;
            var pK_PersonsUc = RelationalModel.GetKey(this,
                "Sample.Api.Core.Types.Person",
                new[] { "Id" });
            pK_Persons.MappedKeys.Add(pK_PersonsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PersonsUc).Add(pK_Persons);
            personsTable.UniqueConstraints.Add("PK_Persons", pK_Persons);
            relationalModel.Tables.Add(("Persons", null), personsTable);
            var personsTableMapping = new TableMapping(person, personsTable, true);
            personsTable.AddTypeMapping(personsTableMapping, false);
            tableMappings.Add(personsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, person.FindProperty("Id")!, personsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, person.FindProperty("Name")!, personsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
